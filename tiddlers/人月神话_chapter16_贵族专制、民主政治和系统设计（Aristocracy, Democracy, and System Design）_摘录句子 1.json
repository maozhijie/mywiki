[
    {
        "created": "20230423081416043",
        "tags": "[[人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）]] ? .",
        "modified": "20230504032254244",
        "title": "人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）/摘录句子 1",
        "type": "text/vnd.tiddlywiki",
        "text": "",
        "caption": "贵族专制统治和民主政治\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        概念的完整性要求设计必须由一个人，或者非常少数互有默契的人员来实现。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        而进度压力却要求很多人员来开发系统。有两种方法可以解决这种矛盾。第一种是仔细地区分设计方法和具体实现。第二种是前一章节中所讨论的、一种崭新的组建编程开发团队的方法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        对于非常大型的项目，将设计方法、体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。我亲眼目睹了它在IBM的Stretch计算机和360计算机产品线上的巨大成功。但同时我也看到了这种方法在360操作系统的开发中，由于缺乏广泛应用所遭受的失败。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        系统的体系结构（architecture）指的是完整和详细的用户接口说明。对于计算机，它是编程手册；对于编译器，它是语言手册；对于控制程序，它是语言和函数调用手册；对于整个系统，它是用户要完成自己全部工作所需参考的手册的集合2。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        因此，系统的结构师，如同建筑的结构师一样，是用户的代理人。结构师的工作，是运用专业技术知识来支持用户的真正利益，而不是维护销售人员所鼓吹的利益。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        体系结构同实现必须仔细地区分开来。如同Blaauw所说的，\"体系结构陈述的是发生了什么，而实现描述的是如何实现3。\"他举了一个简单的例子–时钟。它的结构包括表面、指针和上发条的旋钮。当一个小孩知道了时钟的外表结构，他很容易从手表或者教堂上的时钟辨认时间。而时钟的实现，描述了表壳中的事物–很多种动力提供装置中的一种，以及众多控制精度方案的一种。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        例如，在System/360中，一个计算机的结构可以用9种不同的模型来实现；而单个实现–Model 30的数据流、内存和微代码实现–可以用于4种不同的体系结构：System/360计算机、拥有224个独立逻辑子通道的复杂通道、选择通道以及1401计算机4。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同样的划分方法也适用于编程系统。例如，美国的Fortran IV标准，是多种编译器所遵循的体系结构标准。该体系结构下有多种可能的实现：以文本为核心、以编译器为核心、快速编译和优化以及侧重语法的实现。相类似的，任何汇编语言和任务控制语言都允许有多种编译器或调度程序的实现。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在让我们来处理具有浓厚感情色彩的问题–贵族统治和民主政治。结构师难道不是新贵？他们一些智力精英，专门来告诉可怜的实现人员如何工作？是否所有的创造性活动被那些精英单独占有，实现人员仅仅是机器中的齿轮？难道不能遵循民主的理论，从所有的员工中搜集好的创意，以得到更好的产品，而不是将技术说明工作仅限定于少数人？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        最后一个问题是最简单的。我当然不认为只有结构师才有好的创意。新的概念经常来自实现者或者用户。然而，我一直试图表达，并且我所有的经验使我确信，系统的概念完整性决定了使用的容易程度。不能与系统基本概念进行整合的良好想法和特色，最好放到一边，不予考虑。如果出现了很多非常重要但不兼容的构想，就应该抛弃原来的设计，对不同基本概念进行合并，在合并后的系统上重新开始。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        至于贵族专制统治的问题，必须回答 \"是\"或者\"否\"。就必须只能存在少数的结构师而言，答案是肯定的，他们的工作产物的生命周期比那些实现人员的产物要长，并且结构师一直处在解决用户问题，实现用户利益的核心地位。如果要得到系统概念上的完整性，那么必须控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        第二个问题的答案是否定的，因为外部技术说明的编制工作并是比具体设计实现更富有创造性，它只是一项性质不同的创造工作而已。在给定体系结构下的设计实现，同样需要同编制技术说明一样的创造性、同样新的思路和卓越的才华。实际上，产品的成本性能比很大程度上依靠实现人员，就如同易用性很大程度上依赖结构师一样。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        ",
        "priority": "0",
        "interval": "4",
        "due": "20230508032254244",
        "review": "20230504032254244",
        "annotate-text": "贵族专制统治和民主政治\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        概念的完整性要求设计必须由一个人，或者非常少数互有默契的人员来实现。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        而进度压力却要求很多人员来开发系统。有两种方法可以解决这种矛盾。第一种是仔细地区分设计方法和具体实现。第二种是前一章节中所讨论的、一种崭新的组建编程开发团队的方法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        对于非常大型的项目，将设计方法、体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。我亲眼目睹了它在IBM的Stretch计算机和360计算机产品线上的巨大成功。但同时我也看到了这种方法在360操作系统的开发中，由于缺乏广泛应用所遭受的失败。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        系统的体系结构（architecture）指的是完整和详细的用户接口说明。对于计算机，它是编程手册；对于编译器，它是语言手册；对于控制程序，它是语言和函数调用手册；对于整个系统，它是用户要完成自己全部工作所需参考的手册的集合2。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        因此，系统的结构师，如同建筑的结构师一样，是用户的代理人。结构师的工作，是运用专业技术知识来支持用户的真正利益，而不是维护销售人员所鼓吹的利益。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        体系结构同实现必须仔细地区分开来。如同Blaauw所说的，\"体系结构陈述的是发生了什么，而实现描述的是如何实现3。\"他举了一个简单的例子–时钟。它的结构包括表面、指针和上发条的旋钮。当一个小孩知道了时钟的外表结构，他很容易从手表或者教堂上的时钟辨认时间。而时钟的实现，描述了表壳中的事物–很多种动力提供装置中的一种，以及众多控制精度方案的一种。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        例如，在System/360中，一个计算机的结构可以用9种不同的模型来实现；而单个实现–Model 30的数据流、内存和微代码实现–可以用于4种不同的体系结构：System/360计算机、拥有224个独立逻辑子通道的复杂通道、选择通道以及1401计算机4。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同样的划分方法也适用于编程系统。例如，美国的Fortran IV标准，是多种编译器所遵循的体系结构标准。该体系结构下有多种可能的实现：以文本为核心、以编译器为核心、快速编译和优化以及侧重语法的实现。相类似的，任何汇编语言和任务控制语言都允许有多种编译器或调度程序的实现。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在让我们来处理具有浓厚感情色彩的问题–贵族统治和民主政治。结构师难道不是新贵？他们一些智力精英，专门来告诉可怜的实现人员如何工作？是否所有的创造性活动被那些精英单独占有，实现人员仅仅是机器中的齿轮？难道不能遵循民主的理论，从所有的员工中搜集好的创意，以得到更好的产品，而不是将技术说明工作仅限定于少数人？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        最后一个问题是最简单的。我当然不认为只有结构师才有好的创意。新的概念经常来自实现者或者用户。然而，我一直试图表达，并且我所有的经验使我确信，系统的概念完整性决定了使用的容易程度。不能与系统基本概念进行整合的良好想法和特色，最好放到一边，不予考虑。如果出现了很多非常重要但不兼容的构想，就应该抛弃原来的设计，对不同基本概念进行合并，在合并后的系统上重新开始。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        至于贵族专制统治的问题，必须回答 \"是\"或者\"否\"。就必须只能存在少数的结构师而言，答案是肯定的，他们的工作产物的生命周期比那些实现人员的产物要长，并且结构师一直处在解决用户问题，实现用户利益的核心地位。如果要得到系统概念上的完整性，那么必须控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        第二个问题的答案是否定的，因为外部技术说明的编制工作并是比具体设计实现更富有创造性，它只是一项性质不同的创造工作而已。在给定体系结构下的设计实现，同样需要同编制技术说明一样的创造性、同样新的思路和卓越的才华。实际上，产品的成本性能比很大程度上依靠实现人员，就如同易用性很大程度上依赖结构师一样。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        ",
        "annotate-prefix": "    \n                    \n                        ",
        "annotate-suffix": "有很多行业和领域中的案例让人相信纪律和规则对行业是有益的。实际上，如同某艺术家的格言所述，\"没有规矩",
        "annotate-colour": "LightSkyBlue",
        "annotate-blend-mode": "multiply",
        "tmap.id": "cf042e2e-1878-45d5-9dd3-5106dc311d51",
        "stream-list": "[[人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）/摘录句子 1/20230504032213497]] [[人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）/摘录句子 1/20230504032217575]]",
        "stream-type": "default"
    }
]