[
    {
        "created": "20230423081800401",
        "tags": "[[人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）]] ? .",
        "modified": "20230504032301002",
        "title": "人月神话/chapter16/贵族专制、民主政治和系统设计（Aristocracy, Democracy, and System Design）/摘录句子 2",
        "type": "text/vnd.tiddlywiki",
        "text": "",
        "caption": "在等待时，实现人员应该做什么？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        几百万元的失误是非常令人惭愧的经验，但同时也是让人记忆深刻的教训。当年我们计划和组织编写OS/360外部技术说明的那个夜晚，常常重现在我的脑海。我和体系结构经理、程序实现经理一起制订计划进度，并确认责任分工。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        体系结构经理拥有10个很好的员工，他声称他们可以书写规格说明，并出色地完成任务。该任务需要10个月，比所允许的进度多了3个月。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        程序实现经理有150人。他认为在体系结构队伍的协助下，他们可以准备技术说明，并且能按照时间进度，完成高质量的、切合实际的说明。此外，如果光是由体系结构的团队\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        承担该工作，他的150人只能坐在那儿干等10个月，无所事事。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        对此，体系结构的经理的反应是，如果让程序实现队伍来负责该工作，结果不会按时完成，仍将推迟3个月，而且质量更加低劣。我将工作分派给了程序实现队伍，其结果也确实如此。体系结构经理的两个结论都得到了证实。另外，概念完整性的缺乏导致系统开发和修改上要付出更昂贵的代价，我估计至少增加了一年的调试时间。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当然，很多因素造成了那个错误的决策，但决定性因素是时间进度和让150名编程人员进行工作的愿望。而它也正是我想强调的致命危险。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当建议由体系结构的团队来编写计算机和编程系统的所有外部技术说明时，编程人员提出了三个反对意见：\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 该说明中的功能过于繁多，而对实际情况中的成本考虑比较少\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 结构师获得了所有创造发明的快乐，剥夺了实现人员的创造力\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 当体系结构的队伍缓慢工作时，很多实现人员只能空闲地坐着等待\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        这些问题中的第一个确实是一项危险，在下一章中我们将讨论这个问题，但其他的两个问题都是一些简单而纯粹的误解。正如我们前面所看到的，实现同样是一项高级别的创造性活动。具体实现中创造和发明的机会，并不会因为指定了外部技术说明而大为减少，相反创造性活动会因为规范化而得到增强，整个产品也一样。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        最后一个反对意见是时间顺序和阶段性上的问题。问题的简要回答是，在说明完成的时候，才雇用编程实现人员。这也正是在搭建一座建筑时所采用的方法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        在计算机这个行业中，节奏非常快，而且常常想尽可能地压缩时间进度，那么技术说明和开发实现能有多少重叠呢？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        如同Blaauw所指出的，整个创造性活动包括了三个独立的阶段：体系结构（architecture）、设计实现（implementation）、物理实现（realization）。在实际情况中，它们往往可以同时开始和并发地进行。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        例如，在计算机的设计中，一旦设计实现人员有了对手册的模糊设想，对技术有了相对清晰的构思以及拥有了定义良好的成本和目标时，工作就可以开始了。他可以开始设计数据流、控制序列、大体的系统划分等等。同时，还需要选用工具以及进行相应的调整，特别\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        是记录存档系统和设计自动化系统。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同时，在物理实现的级别，电路、板卡、线缆、机箱、电源和内存必须分别设计、细化和编制文档。这项工作与体系结构及设计实现并行进行。。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        在编程系统的开发中，这个原理同样适用。在外部说明完成之前，设计实现人员有很多的事情可以做。只要有一些最终将并入外部说明的系统功能雏形，他就可以开始了。首先，必须设定良好定义的时间和空间目标，了解产品运行的平台配置。接着，他可以开始设计模块的边界、表结构、算法以及所有的工具。另外，还需要花费一些时间和体系结构师沟通。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同时，在物理实现的级别，也有很多可以着手的工作。编程也是一项技术，如果是新型的机器，则在库的调整、系统管理以及搜索和排序算法上，有许多事情需要处理7。",
        "priority": "0",
        "interval": "4",
        "due": "20230508032301002",
        "review": "20230504032301002",
        "annotate-text": "在等待时，实现人员应该做什么？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        几百万元的失误是非常令人惭愧的经验，但同时也是让人记忆深刻的教训。当年我们计划和组织编写OS/360外部技术说明的那个夜晚，常常重现在我的脑海。我和体系结构经理、程序实现经理一起制订计划进度，并确认责任分工。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        体系结构经理拥有10个很好的员工，他声称他们可以书写规格说明，并出色地完成任务。该任务需要10个月，比所允许的进度多了3个月。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        程序实现经理有150人。他认为在体系结构队伍的协助下，他们可以准备技术说明，并且能按照时间进度，完成高质量的、切合实际的说明。此外，如果光是由体系结构的团队\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        承担该工作，他的150人只能坐在那儿干等10个月，无所事事。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        对此，体系结构的经理的反应是，如果让程序实现队伍来负责该工作，结果不会按时完成，仍将推迟3个月，而且质量更加低劣。我将工作分派给了程序实现队伍，其结果也确实如此。体系结构经理的两个结论都得到了证实。另外，概念完整性的缺乏导致系统开发和修改上要付出更昂贵的代价，我估计至少增加了一年的调试时间。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当然，很多因素造成了那个错误的决策，但决定性因素是时间进度和让150名编程人员进行工作的愿望。而它也正是我想强调的致命危险。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当建议由体系结构的团队来编写计算机和编程系统的所有外部技术说明时，编程人员提出了三个反对意见：\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 该说明中的功能过于繁多，而对实际情况中的成本考虑比较少\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 结构师获得了所有创造发明的快乐，剥夺了实现人员的创造力\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        .. 当体系结构的队伍缓慢工作时，很多实现人员只能空闲地坐着等待\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        这些问题中的第一个确实是一项危险，在下一章中我们将讨论这个问题，但其他的两个问题都是一些简单而纯粹的误解。正如我们前面所看到的，实现同样是一项高级别的创造性活动。具体实现中创造和发明的机会，并不会因为指定了外部技术说明而大为减少，相反创造性活动会因为规范化而得到增强，整个产品也一样。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        最后一个反对意见是时间顺序和阶段性上的问题。问题的简要回答是，在说明完成的时候，才雇用编程实现人员。这也正是在搭建一座建筑时所采用的方法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        在计算机这个行业中，节奏非常快，而且常常想尽可能地压缩时间进度，那么技术说明和开发实现能有多少重叠呢？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        如同Blaauw所指出的，整个创造性活动包括了三个独立的阶段：体系结构（architecture）、设计实现（implementation）、物理实现（realization）。在实际情况中，它们往往可以同时开始和并发地进行。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        例如，在计算机的设计中，一旦设计实现人员有了对手册的模糊设想，对技术有了相对清晰的构思以及拥有了定义良好的成本和目标时，工作就可以开始了。他可以开始设计数据流、控制序列、大体的系统划分等等。同时，还需要选用工具以及进行相应的调整，特别\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        是记录存档系统和设计自动化系统。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同时，在物理实现的级别，电路、板卡、线缆、机箱、电源和内存必须分别设计、细化和编制文档。这项工作与体系结构及设计实现并行进行。。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        在编程系统的开发中，这个原理同样适用。在外部说明完成之前，设计实现人员有很多的事情可以做。只要有一些最终将并入外部说明的系统功能雏形，他就可以开始了。首先，必须设定良好定义的时间和空间目标，了解产品运行的平台配置。接着，他可以开始设计模块的边界、表结构、算法以及所有的工具。另外，还需要花费一些时间和体系结构师沟通。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        同时，在物理实现的级别，也有很多可以着手的工作。编程也是一项技术，如果是新型的机器，则在库的调整、系统管理以及搜索和排序算法上，有许多事情需要处理7。",
        "annotate-prefix": "    \n                    \n                        ",
        "annotate-suffix": "\n                    \n                \n           ",
        "annotate-colour": "LightSkyBlue",
        "annotate-blend-mode": "multiply",
        "tmap.id": "c8e520e8-4c74-46d5-8541-82379dd93236"
    }
]