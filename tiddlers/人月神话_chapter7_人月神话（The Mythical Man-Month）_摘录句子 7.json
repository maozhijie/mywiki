[
    {
        "created": "20230423080317613",
        "tags": "[[人月神话/chapter7/人月神话（The Mythical Man-Month）]] ? .",
        "modified": "20230423080317613",
        "title": "人月神话/chapter7/人月神话（The Mythical Man-Month）/摘录句子 7",
        "type": "text/vnd.tiddlywiki",
        "caption": "空泛的估算\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        观察一下编程人员，你可能会发现，同厨师一样，某项任务的计划进度，可能受限于顾客要求的紧迫程度，但紧迫程度无法控制实际的完成情况。就像约好在两分钟内完成一个煎蛋，看上去可能进行得非常好。但当它无法在两分钟内完成时，顾客只能选择等待或者生吃煎蛋。软件顾客的情况类似。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        厨师还有其他的选择：他可以把火开大，不过结果常常是无法\"挽救\"的煎蛋–一面已经焦了，而另一面还是生的。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在，我并不认为软件经理内在的勇气和坚持不如厨师，或者不如其他工程经理。但为了满足顾客期望的日期而造成的不合理进度安排，在软件领域中却比其他的任何工程领域要普遍得多。而且，非阶段化方法的采用，少得可怜的数据支持，加上完全借助软件经理的直觉，这样的方式很难生产出健壮可靠和规避风险的估计。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        显然我们需要两种解决方案。开发并推行生产率图表、缺陷率、估算规则等等，而整个组织最终会从这些数据的共享上获益。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        或者，在基于可靠基础的估算出现之前，项目经理需要挺直腰杆，坚持他们的估计，确信自己的经验和直觉总比从期望派生出的结果要强得多。",
        "priority": "0",
        "interval": "2",
        "due": "20230425080317613",
        "review": "20230423080317613",
        "annotate-text": "空泛的估算\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        观察一下编程人员，你可能会发现，同厨师一样，某项任务的计划进度，可能受限于顾客要求的紧迫程度，但紧迫程度无法控制实际的完成情况。就像约好在两分钟内完成一个煎蛋，看上去可能进行得非常好。但当它无法在两分钟内完成时，顾客只能选择等待或者生吃煎蛋。软件顾客的情况类似。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        厨师还有其他的选择：他可以把火开大，不过结果常常是无法\"挽救\"的煎蛋–一面已经焦了，而另一面还是生的。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在，我并不认为软件经理内在的勇气和坚持不如厨师，或者不如其他工程经理。但为了满足顾客期望的日期而造成的不合理进度安排，在软件领域中却比其他的任何工程领域要普遍得多。而且，非阶段化方法的采用，少得可怜的数据支持，加上完全借助软件经理的直觉，这样的方式很难生产出健壮可靠和规避风险的估计。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        显然我们需要两种解决方案。开发并推行生产率图表、缺陷率、估算规则等等，而整个组织最终会从这些数据的共享上获益。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        或者，在基于可靠基础的估算出现之前，项目经理需要挺直腰杆，坚持他们的估计，确信自己的经验和直觉总比从期望派生出的结果要强得多。",
        "annotate-prefix": "    \n                    \n                        ",
        "annotate-suffix": "\n                    \n                \n           ",
        "annotate-colour": "LightSkyBlue",
        "annotate-blend-mode": "multiply"
    }
]