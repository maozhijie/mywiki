[
    {
        "created": "20230423080447553",
        "tags": "[[人月神话/chapter7/人月神话（The Mythical Man-Month）]] ? .",
        "modified": "20230423080447553",
        "title": "人月神话/chapter7/人月神话（The Mythical Man-Month）/摘录句子 8",
        "type": "text/vnd.tiddlywiki",
        "text": "",
        "caption": "重复产生的进度灾难\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当一个软件项目落后于进度时，通常的做法是什么呢？自然是加派人手。如图2.1至2.4所示，这可能有所帮助，也可能无法解决问题。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        我们来考虑一个例子3。设想一个估计需要12个人月的任务，分派给3个成员4个月时间，在每个月的末尾安排了可测量的里程碑A、B、C、D（图2.5）。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在假定两个月之后，第一个里程碑没有达到（图2.6）。项目经理面对的选择方案有哪些呢？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        1. 假设任务必须按时完成。假设仅仅是任务的第一个部分估计不得当，即如图2.6所示，则剩余了9个人月的工作量，时间还有两个月，即需要4.5个开发人员，所以需要在原来3个人的基础上增加2个人。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        2. 假设任务必须按时完成。假设整个任务的估计偏低，即如图2.7所示，那么还有18个人月的工作量以及2个月的时间，需要将原来的3个人增至9个人。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        3. 重新安排进度。我喜欢P.Fagg，一个具有丰富经验的硬件工程师的忠告：\"避免小的偏差（Take no small slips）\"。也就是说，在新的进度安排中分配充分的时间，以确保工作能仔细、彻底地完成，从而无需重新确定时间进度表。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        4. 削减任务。在现实情况中，一旦开发团队观察到进度的偏差，总是倾向于对任务进行削减。当项目延期所导致的后续成本非常高时，这常常是唯一可行的方法。项目经理的相应措施是仔细、正式地调整项目，重新安排进度；或者是默默地注视着任务项由于轻率的设计和不完整的测试而被剪除。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.5\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.6\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.7\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.8\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        前两种情况中，坚持把不经调整的任务在四个月内完成将是灾难性的。考虑到重复生成的工作量，以第一种为例（图2.8）–不论在多短的时间内，聘请到多么能干的两位新员工，他们都需要接受一位有经验的职员的培训。如果培训需要一个月的时间，那么三个人月将会投入到原有进度安排以外的工作中。另外，原先划分为三个部分的工作，会重新分解成五个部分；某些已经完成的工作必定会丢失，系统测试必须被延长。因此，在第三个月的月末，仍然残留着7个人月的工作，但此时只有5个有效的人月。如同图2.8所示，产品还是会延期，如同没有增加任何人手（图2.6）。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        期望四个月内完成项目，仅仅考虑培训的时间，不考虑任务的重新划分和额外的系统测试，在第二个月末需要增添4个，而不是2个人员。如果考虑任务划分和系统测试的工作量，则还需要继续增加人手。到那时所拥有的就不是3人的队伍，而是7人以上的团队；并且小组的组织和任务的划分在类型上都不尽相同，这已经不是程度上的差异问题。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        注意在第三个月的结尾时，情况看上去还是很糟。除去管理的工作不谈，3月1日的里程碑仍未达到。此时，对项目经理而言，仍然存在着很强的诱惑–添加更多人力，结果往往会是上述循环的重复。这简直就是一种疯狂、愚蠢的做法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        前面的讨论仅仅是第一个里程碑估计不当的情况。如果在3月1日，项目经理做出了比较保守的假设，即整个估计过于乐观了，如图2.7所示。6个人手需要添加到原先的任务中。培训、任务的重新分配、系统测试工作量的计算作为练习留给读者。但是毫无疑问，重现\"灾难\"所开发出的产品，比没有增加人手，而是重新安排开发进度所产生的产品更差。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        简单、武断地重复一下Brooks法则：\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        向进度落后的项目中增加人手，只会使进度更加落后。（Adding manpower to a late software project makes it later）\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        这就是除去了神话色彩的人月。项目的时间依赖于顺序上的限制，人员的数量依赖于单个子任务的数量。从这两个数值可以推算出进度时间表，该表安排的人员较少，花费的时间较长（唯一的风险是产品可能会过时）。相反，分派较多的人手，计划较短的时间，将无法得到可行的进度表。总之，在众多软件项目中，缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来的影响还要大。",
        "priority": "0",
        "interval": "2",
        "due": "20230425080447552",
        "review": "20230423080447552",
        "annotate-text": "重复产生的进度灾难\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        当一个软件项目落后于进度时，通常的做法是什么呢？自然是加派人手。如图2.1至2.4所示，这可能有所帮助，也可能无法解决问题。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        我们来考虑一个例子3。设想一个估计需要12个人月的任务，分派给3个成员4个月时间，在每个月的末尾安排了可测量的里程碑A、B、C、D（图2.5）。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        现在假定两个月之后，第一个里程碑没有达到（图2.6）。项目经理面对的选择方案有哪些呢？\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        1. 假设任务必须按时完成。假设仅仅是任务的第一个部分估计不得当，即如图2.6所示，则剩余了9个人月的工作量，时间还有两个月，即需要4.5个开发人员，所以需要在原来3个人的基础上增加2个人。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        2. 假设任务必须按时完成。假设整个任务的估计偏低，即如图2.7所示，那么还有18个人月的工作量以及2个月的时间，需要将原来的3个人增至9个人。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        3. 重新安排进度。我喜欢P.Fagg，一个具有丰富经验的硬件工程师的忠告：\"避免小的偏差（Take no small slips）\"。也就是说，在新的进度安排中分配充分的时间，以确保工作能仔细、彻底地完成，从而无需重新确定时间进度表。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        4. 削减任务。在现实情况中，一旦开发团队观察到进度的偏差，总是倾向于对任务进行削减。当项目延期所导致的后续成本非常高时，这常常是唯一可行的方法。项目经理的相应措施是仔细、正式地调整项目，重新安排进度；或者是默默地注视着任务项由于轻率的设计和不完整的测试而被剪除。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.5\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.6\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.7\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        \n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        图2.8\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        前两种情况中，坚持把不经调整的任务在四个月内完成将是灾难性的。考虑到重复生成的工作量，以第一种为例（图2.8）–不论在多短的时间内，聘请到多么能干的两位新员工，他们都需要接受一位有经验的职员的培训。如果培训需要一个月的时间，那么三个人月将会投入到原有进度安排以外的工作中。另外，原先划分为三个部分的工作，会重新分解成五个部分；某些已经完成的工作必定会丢失，系统测试必须被延长。因此，在第三个月的月末，仍然残留着7个人月的工作，但此时只有5个有效的人月。如同图2.8所示，产品还是会延期，如同没有增加任何人手（图2.6）。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        期望四个月内完成项目，仅仅考虑培训的时间，不考虑任务的重新划分和额外的系统测试，在第二个月末需要增添4个，而不是2个人员。如果考虑任务划分和系统测试的工作量，则还需要继续增加人手。到那时所拥有的就不是3人的队伍，而是7人以上的团队；并且小组的组织和任务的划分在类型上都不尽相同，这已经不是程度上的差异问题。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        注意在第三个月的结尾时，情况看上去还是很糟。除去管理的工作不谈，3月1日的里程碑仍未达到。此时，对项目经理而言，仍然存在着很强的诱惑–添加更多人力，结果往往会是上述循环的重复。这简直就是一种疯狂、愚蠢的做法。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        前面的讨论仅仅是第一个里程碑估计不当的情况。如果在3月1日，项目经理做出了比较保守的假设，即整个估计过于乐观了，如图2.7所示。6个人手需要添加到原先的任务中。培训、任务的重新分配、系统测试工作量的计算作为练习留给读者。但是毫无疑问，重现\"灾难\"所开发出的产品，比没有增加人手，而是重新安排开发进度所产生的产品更差。\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        简单、武断地重复一下Brooks法则：\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        向进度落后的项目中增加人手，只会使进度更加落后。（Adding manpower to a late software project makes it later）\n                    \n                \n                    \n                        \n\n                    \n                \n                    \n                        这就是除去了神话色彩的人月。项目的时间依赖于顺序上的限制，人员的数量依赖于单个子任务的数量。从这两个数值可以推算出进度时间表，该表安排的人员较少，花费的时间较长（唯一的风险是产品可能会过时）。相反，分派较多的人手，计划较短的时间，将无法得到可行的进度表。总之，在众多软件项目中，缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来的影响还要大。",
        "annotate-prefix": "    \n                    \n                        ",
        "annotate-suffix": "\n                    \n                \n           ",
        "annotate-colour": "LightSkyBlue",
        "annotate-blend-mode": "multiply",
        "tmap.id": "c0656036-a6d4-446e-b811-a97bd1f42d43"
    }
]